name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
    branches:
      - 'main'

jobs:
  build:
    runs-on: ubuntu-latest
#    todo: explore running in a dotnet sdk container
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

#      We clean the local cache first, because it can get re-used from other people's
#      runs, and caching their dependencies just inflates our cache size and
#      slows down our CI
      - name: Clean Nuget Cache
        run: dotnet nuget locals global-packages -c
      
#      Our CI caching strategy is to "cache the cache"
#      Basically, we preserve our package manager's local on-disk cache between runs
#      and then just always do a restore from the package manager.
#      This makes our workflow simpler, because we don't need to check for cache misses,
#      and we have fewer locations to check for packages.
#      It also means we can gladly take partial cache hits, because
#      we'll restore the difference before build.
#      This makes CI both faster (usually) and more reliable, because we're less likely to
#      need to traverse the internet, or encounter transient errors from the upstream repositories
      - name: Nuget Package Cache
        id: package-cache
        uses: actions/cache@v4
        with:
          path: ${{env.NUGET_PACKAGES}}
          key: "${{ runner.os }}-nuget-${{ hashFiles('Directory.Packages.props') }}"
          restore-keys: "${{ runner.os }}-nuget"
          
      - name: Libman Resource Cache
        uses: actions/cache@v4
        with:
          path: "~/.local/share/.librarymanager/cache"
          key: "libman-${{ hashFiles('**/libman.json') }}"
          restore-keys: libman

      - name: Restore Packages
        run: dotnet restore
      
      - name: Restore Tools
        run: dotnet tool restore

      - name: Build
        run: dotnet build Letterbook.sln --configuration Release --no-restore
      
      - name: Test
        run: dotnet test Letterbook.UnitTests.slnf --configuration Release --logger GitHubActions --no-build
      
      - name: Check Relational Migrations
        run: dotnet ef migrations has-pending-model-changes
        working-directory: Source/Letterbook.Adapter.Db/
        
      - name: Check Feeds Migrations
        run: dotnet ef migrations has-pending-model-changes
        working-directory: Source/Letterbook.Adapter.TimescaleFeeds/

      - name: Check Docs Prerender
        working-directory: ./Letterbook.Docs
        run: |
          echo "Prerendering for deployment to $custom_domain"
          dotnet run --AppTasks=prerender --BaseUrl "${{env.custom_domain}}"
        env:
          custom_domain: "letterbook.com"
      
      - name: Check Generated Files
        run: |
          CHANGED=$(git status --porcelain -uno)
          if [ -n "$CHANGED" ]; then
            echo "$CHANGED"
            echo 'Failed: Stale files'
            exit 1
          fi
        shell: bash
        
  end-to-end-test:
    # disabled for now because they're not working, and there's no real tests in here anyway
    if: false
    runs-on: ubuntu-latest
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Package Cache
        id: package-cache
        uses: actions/cache@v4
        with:
          path: ${{env.NUGET_PACKAGES}}
          key: "${{ runner.os }}-nuget-${{ hashFiles('Directory.Packages.props') }}"

      - name: Restore Packages
        if: steps.package-cache.outputs.cache-hit != 'true'
        run: dotnet restore

      - name: Restore Tools
        run: dotnet tool restore

      - name: Build
        run: dotnet build Letterbook.sln --configuration Release

      - name: Run docker-compose
        uses: hoverkraft-tech/compose-action@v2.0.1

      - name: Seed database
        run:
          dotnet ef database update --project Letterbook.Adapter.Db/Letterbook.Adapter.Db.csproj &&
          dotnet ef database update --project Letterbook.Adapter.TimescaleFeeds/Letterbook.Adapter.TimescaleFeeds.csproj &&
          dotnet user-secrets set "HostSecret" "$(openssl rand -base64 32)" --project Letterbook

      - name: Start server
        run: dotnet run --project Letterbook.Web &

      - name: E2E Test
        run: dotnet test Letterbook.Web.Tests.E2E --no-build --configuration Release
        env:
          BROWSER: firefox
