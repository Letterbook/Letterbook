@page "/blog/post/{Year}/{Month}/{Day}/{Slug}"
@model Letterbook.Docs.Pages.Blog.Page

@using Letterbook.Docs.Markdown
@using Microsoft.AspNetCore.Html
@implements IRenderStatic<Page>

@functions {

    public List<Page> GetStaticProps(RenderContext ctx)
    {
        var blog = ctx.Resolve<Markdown.LoaderFactory>();
        return blog.LoadFrom<Markdown.LoadDate, MarkdownDoc>("_blog").GetAll()
            .Select(p => new Page(blog)
            {
                Slug = p.Slug,
                Year = p.Date.Year,
                Month = p.Date.Month,
                Day = p.Date.Day,
            })
            .ToList();
    }

}

@{
    if (Model.Source == null)
    {
        Response.Redirect("/404");
        return;
    }

    Response.StatusCode = 200;
    ViewData["Title"] = Model.Source.Title;
    ViewData["OgType"] = "article";
    ViewData["OgUrl"] = $"/blog/post/{Model.Year}/{Model.Month}/{Model.Day}/{Model.Slug}";
    if (Model.Source.Image != null)
        ViewData["OgImage"] = "https://letterbook.com" + Model.Source.Image.Href;
}

@{
    var time = new HtmlString($"""<br/><time class="blog-time" datetime="{Model.Source.Date:yyyy-MM-dd}">{Model.Source.Date:D}</time>""");
}

@switch (Model.Source.Authors.Count)
{
    case > 1:
    {
        <span class="authors">By
            @foreach (var id in Model.Source.Authors)
            {
                if (Model.SourceAuthors.TryGetValue(id, out var author))
                {
                    <a href="/blog/author/@author.Slug" rel="author">@author.DisplayName</a> 
                }
                else { @id }
            }
        @time
        </span>
        break;
    }
    case 1:
    {
            @if (Model.SourceAuthors.TryGetValue(Model.Source.Authors.First(), out var author))
            {
                <div class="blog-byline">
                    @if (author.Image != null)
                    {
                        <picture>
                            <img class="blog-pfp" src="@author.Image.Href" alt="@author.Image.Alt"/>
                        </picture>
                    }
                    <span>By <a href="/blog/author/@author.Slug" rel="author">@author.DisplayName</a>@time</span>
                </div>
            }
            else { <span>By @Model.Source.Authors.First()@time</span> }
        break;
    }
}


@if (Model.Source.Canonical is { } canonical && new Uri(canonical) is { } href && href.IsAbsoluteUri)
{
    <cite>Originally published at <a href="@href.ToString()">@href.ToString()</a></cite>
}

@if (Model.Source.Image is { } image)
{
    <figure>
        <img src="@image.Href" alt="@image.Alt"/>
        @if (image.Attribution != null)
        {
            <figcaption><a href="@image.Attribution">Source</a></figcaption>
        }
    </figure>
}

<div class="blog-grid">@Model.Html</div>

@section Head
{
    @foreach (var author in @Model.Source.Authors)
    {
        <link rel="author" href="/blog/author/@author"/>
    }
    @if (Model.Source.Canonical is { } canonical && new Uri(canonical) is {} href)
    {
        <link rel="canonical" href="@(href.IsAbsoluteUri ? href.ToString() : $"https://letterbook.com/{href.ToString()}")"/>
    }

    <meta property="article:published_time" content="@Model.Source.Date.ToString("O")"/>
    @foreach (var id in Model.Source.Authors)
    {
        var author = Model.Authors.GetBySlug<MarkdownAuthor>(id);
        if (author == null) continue;
        <meta property="article:author" content="https://letterbook.com/blog/author/@id"/>
    }
}
