@page
@model Letterbook.Docs.Pages.Shared.DocsPage
@inject MarkdownPages Markdown
@inject AppConfig Config

@{
    var info = Model;

    var slug = string.IsNullOrEmpty(info.Slug)
        ? "index"
        : info.Slug;
    var doc = Markdown.GetBySlug($"{info.Folder}/{slug}");
    if (doc == null)
    {
        Response.Redirect("/404");
        return;
    }
    Response.StatusCode = 200; // avoid redirects for requests with trailing '/' which get double handled
    if (doc.Layout != null) 
        Layout = doc.Layout == "none"
            ? null
            : doc.Layout;
    ViewData["Title"] = doc.Title;

    var sidebar = Markdown.GetSidebar(info.Folder, info.DefaultMenu);
    Model.SidebarFilter?.Invoke(sidebar);

    var docMjs = Markdown.VirtualFiles.GetFile($"/wwwroot/pages/{doc.Slug}.mjs");
    var docCss = Markdown.VirtualFiles.GetFile($"/wwwroot/pages/{doc.Slug}.css");
}

<style>
.active {
    color: #0ea5e9 !important;
}
</style>
<link rel="stylesheet" href="/css/highlight.css">
<link rel="stylesheet" href="/css/typography.css">
<link rel="stylesheet" href="/css/lite-yt-embed.css">

@{
    if (docCss != null)
    {
        <link rel="stylesheet" href="/pages/@(doc.Slug).css">
    }
}
<div class="w-full max-w-[100rem] mx-auto">
    <div class="flex flex-wrap">
        <div id="sidebar" class="z-40 inset-0 flex-none bg-white dark:bg-black lg:w-64 xl:w-80">
            <button v-cloak v-on:click="open=true" :class="['text-gray-400 hover:text-gray-500 pt-4 pl-2 absolute transform transition-all duration-200', open ? 'opacity-0 translate-x-56' : 'opacity-100']" title="Open Sidebar">
                <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H10m10 0l-4 4m4-4l-4-4M4 4v16"/></svg>
            </button>
            <div :class="['fixed bg-white dark:bg-black h-screen overflow-y-auto scrolling-touch overflow-hidden shadow lg:shadow-none transform transition-transform duration-200', open ? '' : 'translate-x-[-100%]']">
                <nav class="sidebar lg:w-64 xl:w-80 px-1 pt-6 pb-16 overflow-y-auto font-medium text-sm lg:text-base sm:px-3 xl:px-5" aria-label="Sidebar">
                    <close-button title="Close Sidebar" class="lg:hidden -mr-2" v-on:close="open=false"></close-button>
                    @foreach (var menu in sidebar)
                    {
                        if (menu.Text != null)
                        {
                            if (menu.Link != null)
                            {
                                <a href="@("/".CombineWith(menu.Link))" class="block flex items-center whitespace-nowrap">
                                    @if (menu.Icon != null)
                                    {
                                        @Html.Raw(menu.Icon)
                                    }
                                    <span class="p-2 pl-3 font-display font-medium text-slate-900 dark:text-white">
                                        @if (!string.IsNullOrEmpty(menu.Text))
                                        {
                                            @menu.Text
                                        }
                                        else
                                        {
                                            <text>&nbsp;</text>
                                        }
                                    </span>
                                </a>
                            }
                            else
                            {
                                <h2 class="font-display font-medium text-slate-900 dark:text-white whitespace-nowrap">
                                    @if (!string.IsNullOrEmpty(menu.Icon))
                                    {
                                        @Html.Raw(menu.Icon)
                                    }
                                    @menu.Text
                                </h2>
                            }
                        }
                        <ul role="list" class="mb-6 mt-2 ml-3 space-y-2 border-l-2 border-slate-100 dark:border-slate-800 lg:mt-4 lg:space-y-4 lg:border-slate-200">
                            @foreach (var menuItem in menu.Children.Safe())
                            {
                                <li class="relative">
                                    <a href="@("/".CombineWith(menuItem.Link))" class="@Html.ClassNames("block w-full pl-3.5 before:pointer-events-none before:absolute before:-left-1 before:top-1/2 before:h-1.5 before:w-1.5 before:-translate-y-1/2 before:rounded-full", Html.MatchesPath("/".CombineWith(menuItem.Link)) ? "active font-semibold text-sky-500 before:bg-sky-500" : "text-slate-500 before:hidden before:bg-slate-300 hover:text-slate-600 hover:before:block dark:text-slate-400 dark:before:bg-slate-700 dark:hover:text-slate-300")">
                                        @menuItem.Text
                                    </a>
                                </li>
                            }
                        </ul>
                    }
                </nav>
            </div>
        </div>
        <div id="doc" class="mx-auto flex">
            <div class="mt-8 mx-auto prose lg:prose-lg">
                
                @if (!Model.HideTitle)
                {
                    <section class="not-prose mb-16 md:mb-12">
                        <h1 class="@Model.TitleClass">
                            @doc.Title
                        </h1>
                    </section>
                }

                <div class="not-prose">@Model.Header?.Invoke(null)</div>

                <div class="content">
                    @Html.Raw(Markdown.SanitizeVueTemplate(doc.Preview))
                </div>

                <div class="not-prose">@Model.Footer?.Invoke(null)</div>
                
                @if (!Model.HideEditOnGitHub && Config.GitPagesBaseUrl != null)
                {
                    <div class="not-prose py-8">
                        <a class="text-slate-500 font-semibold hover:text-indigo-600 flex items-center" href="@Config.GitPagesBaseUrl.CombineWith(doc.Path)" target="_blank" rel="noopener noreferrer">
                            Edit this page on GitHub<svg class="ml-1 inline-block w-4 h-4" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" data-v-1ed99556=""><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path><polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg>
                        </a>
                    </div>
                }

                @if (!Model.HideNavigation)
                {
                    <div class="not-prose my-20">
                        @{
                            var activeMenu = sidebar.FirstOrDefault(menu => menu.Children?.Any(x => Html.MatchesPath("/".CombineWith(x.Link))) == true);
                            var allPages = activeMenu?.Children ?? new();
                            var activeMenuItem = allPages.FirstOrDefault(x => Html.MatchesPath("/".CombineWith(x.Link)));
                            var currIndex = activeMenuItem != null ? allPages.IndexOf(activeMenuItem) : -1;

                            var prev = currIndex > 0
                                ? allPages[currIndex - 1]
                                : null;

                            if (prev == null)
                            {
                                if (currIndex == 0 && activeMenu != null)
                                {
                                    // If currIndex == 0 choose parent
                                    if (activeMenu is { Text: not null, Link: not null })
                                    {
                                        prev = new MarkdownMenuItem { Text = activeMenu.Text, Link = activeMenu.Link };
                                    }
                                    else
                                    {
                                        // If no parent choose last menuitem of previous menu
                                        var activeMenuIndex = sidebar.IndexOf(activeMenu);
                                        var prevActiveMenu = activeMenuIndex > 0
                                            ? sidebar[activeMenuIndex - 1]
                                            : null;
                                        prev = prevActiveMenu?.Children?.LastOrDefault();
                                    }
                                }
                            }

                            var next = currIndex + 1 < allPages.Count
                                ? allPages[currIndex + 1]
                                : null;

                            // If active menu is parent choose first child
                            if (next == null)
                            {
                                if (string.IsNullOrEmpty(Model.Slug))
                                {
                                    next = sidebar.FirstOrDefault(menu => Html.MatchesPath("/".CombineWith(menu.Link)))?.Children?.FirstOrDefault();
                                }
                            }
                            
                            // If last, choose first link of next menu
                            if (next == null && activeMenu != null)
                            {
                                if (currIndex == allPages.Count - 1)
                                {
                                    var activeMenuIndex = sidebar.IndexOf(activeMenu);
                                    var nextActiveMenu = activeMenuIndex < sidebar.Count - 1
                                        ? sidebar[activeMenuIndex + 1]
                                        : null;
                                    next = (nextActiveMenu?.Link != null ? new MarkdownMenuItem { Text = nextActiveMenu.Text!, Link = nextActiveMenu.Link } : null)
                                        ?? nextActiveMenu?.Children?.FirstOrDefault();
                                }
                            }

                            if (prev != null || next != null)
                            {
                                <nav class="flex items-center justify-between border-t border-gray-200 dark:border-gray-700 px-4 sm:px-0">
                                    <div class="-mt-px flex w-0 flex-1">
                                        @if (prev != null)
                                        {
                                            <a href="@("/".CombineWith(prev.Link))" class="inline-flex items-center border-t-2 border-transparent pt-4 pr-1 text-sm font-medium text-gray-500 hover:border-gray-300 dark:hover:border-gray-600 hover:text-gray-700 dark:hover:text-gray-200">
                                                <!-- Heroicon name: mini/arrow-long-left -->
                                                <svg class="mr-3 h-5 w-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                    <path fill-rule="evenodd" d="M18 10a.75.75 0 01-.75.75H4.66l2.1 1.95a.75.75 0 11-1.02 1.1l-3.5-3.25a.75.75 0 010-1.1l3.5-3.25a.75.75 0 111.02 1.1l-2.1 1.95h12.59A.75.75 0 0118 10z" clip-rule="evenodd"></path>
                                                </svg>
                                                @(prev.Text ?? "Previous")
                                            </a>
                                        }
                                    </div>
                                    <div class="hidden md:-mt-px md:flex"></div>
                                    <div class="-mt-px flex w-0 flex-1 justify-end">
                                        @if (next != null)
                                        {
                                            <a href="@("/".CombineWith(next.Link))" class="inline-flex items-center border-t-2 border-transparent pt-4 pl-1 text-sm font-medium text-gray-500 hover:border-gray-300 dark:hover:border-gray-600 hover:text-gray-700 dark:hover:text-gray-200">
                                                @(next.Text ?? "Next")
                                                <!-- Heroicon name: mini/arrow-long-right -->
                                                <svg class="ml-3 h-5 w-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                    <path fill-rule="evenodd" d="M2 10a.75.75 0 01.75-.75h12.59l-2.1-1.95a.75.75 0 111.02-1.1l3.5 3.25a.75.75 0 010 1.1l-3.5 3.25a.75.75 0 11-1.02-1.1l2.1-1.95H2.75A.75.75 0 012 10z" clip-rule="evenodd"></path>
                                                </svg>
                                            </a>
                                        }
                                    </div>
                                </nav>
                            }
                        }
                    </div>
                }
            </div>
                
            @if (!Model.HideDocumentMap && doc.DocumentMap?.Headings.Count > 0)
            {
                <div class="docmap hidden 2xl:block flex-none w-64 pl-8 mr-8">
                    <div class="fixed bg-white dark:bg-black flex flex-col overflow-y-auto pt-10 px-8 pb-6" style="height:calc(100vh - 50px);">
                        <div>
                            <h5 class="text-slate-900 font-semibold mb-4 text-sm leading-6 dark:text-slate-100">
                                On This Page
                            </h5>
                            <ul class="text-slate-700 text-sm leading-6">
                                @foreach (var h2 in doc.DocumentMap.Headings)
                                {
                                    <li class="group text-gray-800 hover:text-gray-900">
                                        <span v-hash="'@h2.Link'" data-id="@h2.Link.Substring(1)" class="cursor-pointer font-medium block text-sm transform transition-colors duration-200 py-2">
                                            @h2.Text
                                        </span>
                                        @if (h2.Children?.Count > 0)
                                        {
                                            <ul class="ml-4">
                                                @foreach (var h3 in h2.Children.Safe())
                                                {
                                                    <li data-id="@h3.Link.Substring(1)" class="text-gray-500 hover:text-gray-900">
                                                        <span v-hash="'@h3.Link'" class="cursor-pointer flex text-sm transform transition-colors duration-200 py-2">
                                                            <svg width="3" height="24" viewBox="0 -9 3 24" class="mr-2 overflow-visible"><path d="M0 0L3 3L0 6" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path></svg>
                                                            @h3.Text
                                                        </span>
                                                    </li>
                                                }
                                            </ul>
                                        }
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            }
                
        </div>
    </div>    
</div>

<script>
//doc instructions
if (document.querySelector('.hide-title')) {
    const el = document.querySelector('#doc section h1') 
    if (el) el.style.display='none'
}
</script>

<script type="module">
import { ref } from "vue"
import { mount } from "app.mjs"

@if (docMjs != null)
{
    <text>
        import App from "/pages/@(doc.Slug).mjs" 
    </text>
}
else
{
    <text>
    const App = {
        setup() {
            function nav(url) {
                window.open(url)
            }
            return { nav }
        }
    }
    </text>
}

const Sidebar = {
    setup() {
        const open = ref(true)
        return { open }
    }
}

mount('#doc', App)
mount('#sidebar', Sidebar)
</script>

<script src="/lib/js/highlight.js"></script>
<script>hljs.highlightAll()</script>
<script src="/lib/js/lite-yt-embed.js"></script>
<script src="/mjs/docs.mjs" type="module"></script>
