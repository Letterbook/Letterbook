//HintName: TestIdIntConverter.g.cs
// <auto-generated from Letterbook.Generators.TypedIdGenerator/>

using System;
using System.ComponentModel;
using System.Globalization;


namespace Letterbook.Generators.Tests;

public class TestIdIntConverter : TypeConverter
{
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) =>
		sourceType == typeof(string);

	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) =>
		destinationType == typeof(string);

	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
	{
		return value switch
		{
			string s => new TestIdInt(TestIdInt.FromString(s)),
			int t => new TestIdInt(t),
			null => null,
			_ => throw new ArgumentException($"Cannot convert from {value} to TestIdInt", nameof(value))
		};
	}

	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
	{
		if (destinationType == typeof(string))
		{
			return value switch
			{
				TestIdInt id => id.ToString(),
				null => null,
				_ => throw new ArgumentException($"Cannot convert {value} to string", nameof(value))
			};
		}
		else if (destinationType == typeof(int))
		{
			return value switch
			{
				TestIdInt id => id.Id,
				null => null,
				_ => throw new ArgumentException($"Cannot convert {value} to string", nameof(value))
			};
		}

		throw new ArgumentException($"Cannot convert {value ?? "(null)"} to {destinationType}", nameof(destinationType));
	}
}